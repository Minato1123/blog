import{_ as e,o,c as t,Q as i}from"./chunks/framework.84e2b86f.js";const b=JSON.parse('{"title":"Git Notes","description":"","frontmatter":{},"headers":[],"relativePath":"notes/misc/git-notes.md"}'),l={name:"notes/misc/git-notes.md"},c=i(`<h1 id="git-notes" tabindex="-1">Git Notes <a class="header-anchor" href="#git-notes" aria-label="Permalink to &quot;Git Notes&quot;">​</a></h1><h2 id="設定-git" tabindex="-1">設定 Git <a class="header-anchor" href="#設定-git" aria-label="Permalink to &quot;設定 Git&quot;">​</a></h2><ul><li><code>git config --global user.name &quot;&lt;GitHub Username&gt;&quot;</code>：設定全域使用者名稱 ( 同 GitHub 的就好 )</li><li><code>git config --global user.email &quot;&lt;GitHub email&gt;&quot;</code>：設定全域使用者信箱 ( 同 GitHub 的就好 )</li></ul><h2 id="git-基礎常用命令" tabindex="-1">Git 基礎常用命令 <a class="header-anchor" href="#git-基礎常用命令" aria-label="Permalink to &quot;Git 基礎常用命令&quot;">​</a></h2><h3 id="一般操作" tabindex="-1">一般操作 <a class="header-anchor" href="#一般操作" aria-label="Permalink to &quot;一般操作&quot;">​</a></h3><ul><li><code>git clone &lt;GitHub url&gt;</code>：把整個專案複製一份下來本地並存在同名的目錄裡 <blockquote><p>所有整個專案的歷史紀錄、分支、標籤等內容都會複製一份下來 最後可以再加參數指定存放位置 ( 可以順便改名 )</p></blockquote></li><li><code>git init</code>：在當前目錄下初始化出一個空的本地儲存庫</li><li><code>git remote add origin &lt;GitHub url&gt;</code>：設定端節的節點</li><li><code>git status</code>：查看當前工作區與暫存區狀態</li><li><code>git log</code>：查看當前本地儲存庫的 commit 紀錄</li><li><code>git log --oneline</code> 用一行查看當前本地儲存庫的 commit 紀錄</li><li><code>git reflog</code>：查看過去 HEAD 指向過去的 commit 清單</li><li><code>git stash list</code>：查看目前的 Stash ( 可以放很多份 ) <blockquote><p>WIP 字樣是「Work In Progress」就是工作進行中的意思</p></blockquote></li><li><code>git remote</code>：顯示已經設定好的遠端版本庫</li><li><code>git remote -v</code>：<strong>更詳細</strong>地顯示已經設定好的遠端版本庫</li><li><code>git branch --remote</code>：顯示遠端的分支</li></ul><h3 id="檔案處理" tabindex="-1">檔案處理 <a class="header-anchor" href="#檔案處理" aria-label="Permalink to &quot;檔案處理&quot;">​</a></h3><ul><li><code>git add &lt;file name&gt;</code>：將 <code>&lt;file name&gt;</code> 的變更放入暫存區</li><li><code>git commit -m &quot;&lt;message&gt;&quot;</code>：將當前暫存區中的所有變更打包成一個版本，並附加版本敘述訊息，紀錄進本地儲存庫</li><li><code>git checkout &lt;file name&gt;</code>：放棄在工作區中名為 <code>&lt;file name&gt;</code> 檔案的所有變更</li><li><code>git push &lt;remote&gt; &lt;branch&gt;</code>：將本地儲存庫的狀態推到遠端儲存庫 <blockquote><p>通常 <code>&lt;remote&gt;</code> 都是 <code>origin</code></p></blockquote></li><li><code>git push -u &lt;remote&gt; &lt;branch&gt;</code>：將本地儲存庫的狀態推到遠端儲存庫 <blockquote><p><code>-u</code> 為將此指令設為預設，可縮寫為 <code>git push</code></p></blockquote></li><li><code>git fetch</code>：本地更新遠端儲存庫的狀態，但遠端被刪除的本地<strong>不會</strong>跟著刪除 <blockquote><p>如果遠端有新分支必須 fetch 才能 pull</p></blockquote></li><li><code>git fetch -p</code>：本地更新遠端儲存庫的狀態，遠端被刪除的本地<strong>會</strong>跟著刪除</li><li><code>git fetch &lt;remote&gt;</code>：視狀況要不要指定 <code>&lt;remote&gt;</code> ( 可能設定兩個以上 )</li><li><code>git pull &lt;remote&gt; &lt;branch&gt;</code>：將遠端儲存庫的狀態拉到本地儲存庫 <blockquote><p>git pull = git fetch + git merge</p></blockquote></li><li><code>git pull --rebase</code>： Fetch 完成之後，便會使用 Rebase 方式進行合併 <blockquote><p>如果不想要 merge 時額外產生的 Commit，可考慮使用 Rebase 方式來進行合併 如果線上版本的內容比本地還要新，Git 不讓你推上去時可用此方法 ( 先拉再推 )</p></blockquote></li><li><code>git push -f</code>：強迫硬推上去，把遠端更新的內容蓋掉 <blockquote><p>如果線上版本的內容比本地還要新，Git 不讓你推上去時可用此方法 但是線上版本更新的部分將會被蓋掉！</p></blockquote></li><li><code>git reset</code>：將暫存區變更退回工作區</li><li><code>git reset [--mixed/--soft/--hard] &lt;commit&gt;</code>：挪動本地儲存庫 HEAD 指向的位置 <ul><li><code>mixed</code>：將指向位置相對未來紀錄的變更退回<strong>工作區</strong></li><li><code>soft</code>：將指向位置相對未來紀錄的變更退回<strong>暫存區</strong></li><li><code>hard</code>：將指向位置相對未來紀錄的變更<strong>刪除</strong> ( 還有救 )</li></ul></li><li><code>git revert &lt;commit&gt;</code>：將指定的 commit 做反向操作並留下一筆紀錄 <blockquote><p>被指定的 commit 的變更紀錄將會消失，但 commit 仍存在， 因為它是透過新增一個 commit 去反向操作將這些變更部分刪除</p><ul><li>如果反悔，可以再開一個新的 Revert，來 Revert 剛剛這個 Revert</li><li>如果是要砍掉這個 Revert，直接使用 Reset 指令</li></ul></blockquote></li></ul><h4 id="cherry-pick" tabindex="-1">cherry-pick <a class="header-anchor" href="#cherry-pick" aria-label="Permalink to &quot;cherry-pick&quot;">​</a></h4><ul><li><code>git cherry-pick &lt;commit hash value&gt;...</code>：撿其他的分支的 Commit 過來跟現分支合併</li><li><code>git cherry-pick &lt;commit hash value&gt; --no-commit</code>：撿過來的 Commit 不會直接合併，而是會先放在暫存區</li></ul><h4 id="stash" tabindex="-1">stash <a class="header-anchor" href="#stash" aria-label="Permalink to &quot;stash&quot;">​</a></h4><ul><li><code>git stash</code>：把目前的修改先暫存起來</li><li><code>git stash pop &lt;stash&gt;</code>：把某個 Stash 拿出來並套用在目前的分支上 <blockquote><p>套用成功之後，那個套用過的 Stash 就會被刪除</p><ul><li>如果後面沒有指定 Stash，預設為最後疊上去的那個</li></ul></blockquote></li><li><code>git stash drop &lt;stash&gt;</code>：把這個 Stash 從列表裡刪掉</li><li><code>git stash apply &lt;stash&gt;</code>：把這個 Stash 拿來套用在現在的分支上並不刪除</li></ul><h3 id="分支處理" tabindex="-1">分支處理 <a class="header-anchor" href="#分支處理" aria-label="Permalink to &quot;分支處理&quot;">​</a></h3><ul><li><code>git branch &lt;branch name&gt;</code>：創建名為 <code>&lt;branch name&gt;</code> 的分支</li><li><code>git branch -D &lt;branch name&gt;</code>：刪除名為 <code>&lt;branch name&gt;</code> 的分支</li><li><code>git branch -m &lt;branch name&gt; &lt;new branch name&gt;</code>：更改分支的名稱</li><li><code>git checkout &lt;branch name&gt;</code>：切換到名為 <code>&lt;branch name&gt;</code> 的分支 ( 最新的 Commit )</li><li><code>git checkout -b &lt;branch name&gt;</code>：創建並切換到名為 <code>&lt;branch name&gt;</code> 的分支</li><li><code>git branch &lt;branch name&gt; &lt;commit hash value&gt;</code>：建立一個 <code>&lt;branch name&gt;</code> 分支指向 <code>&lt;commit hash value&gt;</code> 這個 Commit</li><li><code>git merge &lt;target branch&gt;</code>：將名為 <code>&lt;target branch&gt;</code> 的 分支合併到當前所在的分支</li><li><code>git rebase &lt;source branch&gt;</code>：將當前所在的分支的根節點挪到名為 <code>&lt;source branch&gt;</code> 的分支葉節點上</li><li><code>git branch &lt;new branch name&gt; &lt;commit hash value&gt;</code>：尚未合併的分支被刪除後可透過建立一個新的的分支，讓它指向原分支上 <code>&lt;commit hash value&gt;</code> 這個 Commit</li><li><code>git checkout -t &lt;remote branch&gt;</code>：切換到遠端分支 <code>&lt;remote branch name&gt;</code> 而不呈現 detached HEAD 狀態 <blockquote><p><code>-t</code> 或 <code>--track</code> 都可以 指會在本機建立一個名為追蹤分支（tracking branch）的東西</p></blockquote></li><li><code>git remote add upstream &lt;GitHub url&gt;</code>：加上另一個遠端節點 ( 通常是 Fork 時原作的專案 )</li><li><code>git push &lt;remote&gt; :&lt;remote branch&gt;</code>：刪除遠端分支</li></ul><div class="danger custom-block"><p class="custom-block-title">注意</p><p>分支只是一個指向某個 Commit 的指標！</p></div><h3 id="合併衝突" tabindex="-1">合併衝突 <a class="header-anchor" href="#合併衝突" aria-label="Permalink to &quot;合併衝突&quot;">​</a></h3><ul><li><code>git reset &lt;commit hash value&gt; --hard</code>：取消 rebase，選擇 rebase 前的最後動作的 Commit 的雜湊值</li><li><code>git reset ORIG_HEAD --hard</code>：取消 rebase，ORIG_HEAD 會記錄「危險操作」之前 HEAD 的位置</li><li><code>git rebase --continue</code>：若 rebase 發生衝突，檔案修正後繼續 rebase</li><li><code>git rebase --abort</code>：若 rebase 發生衝突，放棄這次的 rebase</li><li><code>git checkout --ours &lt;image&gt;</code>：若是圖片之類的檔案產生衝突，決定使用當前分支的檔案</li><li><code>git checkout --theirs &lt;image&gt;</code>：若是圖片之類的檔案產生衝突，決定使用對方分支的檔案</li></ul><h3 id="互動模式" tabindex="-1">互動模式 <a class="header-anchor" href="#互動模式" aria-label="Permalink to &quot;互動模式&quot;">​</a></h3><ul><li><code>git rebase -i &lt;commit hash value&gt;</code>：<code>-i</code> 參數是指要進入 Rebase 指令的「互動模式」，而後面的 <code>&lt;commit hash value&gt;</code> 是指這次的 Rebase 指令的應用範圍會「從現在到 <code>&lt;commit hash value&gt;</code> 這個 Commit」，這個指令會跳出一個 Vim 編輯器。 :::success 請注意 Commit 的順序！ :::</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Commands:</span></span>
<span class="line"><span style="color:#A6ACCD;"># p, pick = use commit</span></span>
<span class="line"><span style="color:#A6ACCD;"># r, reword = use commit, but edit the commit message</span></span>
<span class="line"><span style="color:#A6ACCD;"># e, edit = use commit, but stop for amending</span></span>
<span class="line"><span style="color:#A6ACCD;"># s, squash = use commit, but meld into previous commit</span></span>
<span class="line"><span style="color:#A6ACCD;"># f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message</span></span>
<span class="line"><span style="color:#A6ACCD;"># x, exec = run command (the rest of the line) using shell</span></span>
<span class="line"><span style="color:#A6ACCD;"># d, drop = remove commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p><strong>修改 Commit 順序</strong> 只要將內容順序做變換就好 ( 越新的 Commit 在越下面 )</p></blockquote><blockquote><p><strong>刪除 Commit</strong> 把原本的 <code>pick</code> 改成 <code>drop</code>，或甚至直接把那行刪掉</p></blockquote><h4 id="pick-reword" tabindex="-1">pick &amp; reword <a class="header-anchor" href="#pick-reword" aria-label="Permalink to &quot;pick &amp; reword&quot;">​</a></h4><blockquote><p>更改 Commit 訊息</p></blockquote><ol><li>前面的 <code>pick</code> 的意思是保留這次的 Commit，不做修改</li><li>將<code>pick</code> 改成 <code>reword</code> 表示修改此 Commit 的訊息</li><li>存檔並離開之後，立馬就會再跳另一個 Vim 編輯器畫面去編輯 Commit 訊息內容</li><li>被更改的 Commit 根本就是全新的 Commit ( 雜湊值已更新 )</li><li>在它之後的 Commit 會因為前面的歷史改了，所以後面整串的 Commit 全部都重新做出新的 Commit 出來替代舊的 Commit</li></ol><h4 id="squash" tabindex="-1">squash <a class="header-anchor" href="#squash" aria-label="Permalink to &quot;squash&quot;">​</a></h4><blockquote><p>將多筆 Commit 紀錄合併</p></blockquote><ol><li>將<code>pick</code> 改成 <code>squash</code> 表示將此 Commit 併到前一個 Commit</li><li>存檔並離開 Vim 編輯器後，它會開始進行 Rebase</li><li>而在 Squash 的過程中，它還會跳出 Vim 編輯器讓你編輯一下 Commit 訊息</li></ol><h4 id="edit" tabindex="-1">edit <a class="header-anchor" href="#edit" aria-label="Permalink to &quot;edit&quot;">​</a></h4><blockquote><p>將單筆 Commit 拆成多筆 Commit</p></blockquote><ol><li>將<code>pick</code> 改成 <code>edit</code> 表示將對此 Commit 停留做修改 ( HEAD 會指向此 commit )</li><li><code>git reset HEAD^</code> reset 回到上一個 Commit，並將原本的變更退回工作區</li><li>重新 <code>add</code> 和 <code>commit</code></li><li><code>git rebase --continue</code> 完成後要記得讓 Rebase 繼續跑完</li></ol><blockquote><p>在某些 Commit 之間再增加一些其它的 Commit</p></blockquote><ol><li>將<code>pick</code> 改成 <code>edit</code> 表示將對此較舊的 Commit 停留做修改 ( HEAD 會指向此 commit )</li><li>新增需要的 commit</li><li><code>git rebase --continue</code> 繼續剛剛中斷的 Rebase</li></ol><h2 id="git-flow" tabindex="-1"><a href="https://github.com/nvie/gitflow" target="_blank" rel="noreferrer">Git Flow</a> <a class="header-anchor" href="#git-flow" aria-label="Permalink to &quot;[Git Flow](https://github.com/nvie/gitflow)&quot;">​</a></h2><h3 id="長期分支" tabindex="-1">長期分支 <a class="header-anchor" href="#長期分支" aria-label="Permalink to &quot;長期分支&quot;">​</a></h3><ul><li><code>master</code><blockquote><p>主要用來放穩定、隨時可上線的版本。<br> 這個分支的來源只能從別的分支合併過來，開發者不會直接 Commit 到這個分支。<br> 因為是穩定版本，所以通常會在這個分支上的 Commit 上打上版本號標籤。</p></blockquote></li><li><code>develop</code><blockquote><p>主要是所有開發的基礎分支。<br> 要新增功能時，所有的 <code>feature</code> 分支都是從這個分支切出去的。<br> 而 <code>feature</code> 分支的功能完成後，也都會合併回來這個分支。</p></blockquote></li></ul><h3 id="短期分支" tabindex="-1">短期分支 <a class="header-anchor" href="#短期分支" aria-label="Permalink to &quot;短期分支&quot;">​</a></h3><ul><li><code>hotfix</code><blockquote><p>當線上產品發生緊急問題的時候，會從 <code>master</code> 分支開一個 <code>hotfix</code> 分支出來進行修復。<br><code>hotfix</code> 分支修復完成之後，會合併回 <code>master</code> 分支，也同時會合併一份到 <code>develop</code> 分支。</p></blockquote></li></ul><div class="warning custom-block"><p class="custom-block-title">為什麼要合併回 <code>develop</code> 分支？</p><p>如果不這麼做，等到 <code>develop</code> 分支完成並且合併回 <code>master</code> 分支的時候，問題再次出現了。</p></div><div class="warning custom-block"><p class="custom-block-title">為什麼不直接從 <code>develop</code> 分支切出來修？</p><p>因為 <code>develop</code> 分支的功能可能尚在開發中，這時候硬是要從這裡切出去修再合併回 <code>master</code> 分支，只會造成更大的災難。</p></div><ul><li><code>release</code><blockquote><p>當認為 <code>develop</code> 分支足夠成熟了，就可以把 <code>develop</code> 分支合併到 <code>release</code> 分支，在這邊進行算是上線前的最後測試。<br> 測試完成後，<code>release</code> 分支將會同時合併到 <code>master</code> 以及 <code>develop</code> 這兩個分支上。<br><code>master</code> 分支是上線版本，而合併回 <code>develop</code> 分支的目的是因為可能在 <code>release</code> 分支上還會測到並修正一些問題，所以需要跟 <code>develop</code> 分支同步，免得之後的版本又再度出現同樣的問題。</p></blockquote></li><li><code>feature</code><blockquote><p>需要新增功能時就是使用 <code>feature</code> 分支。<br><code>feature</code> 分支都是從 <code>develop</code> 分支來的，完成之後會再併回 <code>develop</code> 分支。</p></blockquote></li></ul><h2 id="commit-提交描述" tabindex="-1">Commit 提交描述 <a class="header-anchor" href="#commit-提交描述" aria-label="Permalink to &quot;Commit 提交描述&quot;">​</a></h2><ul><li><code>feat</code>：新功能</li><li><code>fix</code>：修復 bug</li><li><code>docs</code>：文件</li><li><code>style</code>：coding style 的調整，例如：空白、分號、空格等，不影響程式碼的內容</li><li><code>refactor</code>：重構現有程式碼，不屬於新增新功能或是修 bug</li><li><code>perf</code>：提升效能的改進</li><li><code>test</code>：新增或修改測試</li><li><code>build</code>：和打包或外部依賴相關的修改，例如：npm、gulp、broccoli</li><li><code>ci</code>：與 CI 設定檔或 script 相關的修改，例如：Travis、Circle、BrowserStack、SauceLabs</li><li><code>chore</code>：其他，並且也不會修改原始碼或是測試，例如：storybook 的新增或變更</li><li><code>revert</code>：回復前一個提交的 commit</li></ul><h2 id="其他技巧" tabindex="-1">其他技巧 <a class="header-anchor" href="#其他技巧" aria-label="Permalink to &quot;其他技巧&quot;">​</a></h2><ul><li><a href="https://gitbook.tw/chapters/command-line/vim-introduction.html" target="_blank" rel="noreferrer">超精簡 Vim 操作介紹</a></li><li><a href="https://gitbook.tw/chapters/config/convenient-settings.html" target="_blank" rel="noreferrer">設定 Git 指令縮寫</a></li><li><a href="https://gitbook.tw/chapters/using-git/add-folder-to-git.html" target="_blank" rel="noreferrer">空的目錄無法被提交</a></li><li><a href="https://gitbook.tw/chapters/using-git/log.html" target="_blank" rel="noreferrer">查詢 Commit 內容、檔案或作者</a></li><li><a href="https://gitbook.tw/chapters/using-git/ignore.html" target="_blank" rel="noreferrer">檔案不想放在 Git 裡面一起備份</a></li><li><a href="https://gitbook.tw/chapters/using-git/reset-commit.html" target="_blank" rel="noreferrer">退回相對的 Commit 紀錄</a></li><li><a href="https://gitbook.tw/chapters/tag/using-tag.html" target="_blank" rel="noreferrer">使用標籤 貼在 Commit 上</a></li><li><a href="https://gitbook.tw/chapters/faq/remove-sensitive-data.html" target="_blank" rel="noreferrer">filter-branch | 一次大量的修改 Commit</a></li><li><a href="https://gitbook.tw/chapters/faq/remove-files-from-git.html" target="_blank" rel="noreferrer">把檔案真正的從 Git 裡移掉</a></li><li><a href="https://gitbook.tw/chapters/faq/detached-head.html" target="_blank" rel="noreferrer">detached HEAD | HEAD 沒有指到某個分支</a></li><li><a href="https://gitbook.tw/chapters/github/push-to-github.html" target="_blank" rel="noreferrer">Push 上傳到 GitHub | SSH Key 的建立與設定</a></li><li><a href="https://gitbook.tw/chapters/github/patch.html" target="_blank" rel="noreferrer">製作更新檔 ( Patch )</a></li></ul><h2 id="來源參考" tabindex="-1">來源參考 <a class="header-anchor" href="#來源參考" aria-label="Permalink to &quot;來源參考&quot;">​</a></h2><p><a href="https://hackmd.io/@DevilTea/Sy4fZo0-S" target="_blank" rel="noreferrer">⋯ Git 基礎筆記</a><span style="margin-right:0.5rem;"></span><a href="https://gitbook.tw/" target="_blank" rel="noreferrer">⋯ 為你自己學 Git</a></p>`,47),a=[c];function r(d,s,n,m,h,u){return o(),t("div",null,a)}const p=e(l,[["render",r]]);export{b as __pageData,p as default};
