import{_ as e,o as a,c as r,Q as l}from"./chunks/framework.84e2b86f.js";const f=JSON.parse('{"title":"Apr. 2023","description":"","frontmatter":{},"headers":[],"relativePath":"daily-log/apr2023.md"}'),t={name:"daily-log/apr2023.md"},o=l(`<h1 id="apr-2023" tabindex="-1">Apr. 2023 <a class="header-anchor" href="#apr-2023" aria-label="Permalink to &quot;Apr. 2023&quot;">​</a></h1><h2 id="_1-st" tabindex="-1">1 st <a class="header-anchor" href="#_1-st" aria-label="Permalink to &quot;1 st&quot;">​</a></h2><h3 id="套件" tabindex="-1">套件 <a class="header-anchor" href="#套件" aria-label="Permalink to &quot;套件&quot;">​</a></h3><ul><li><a href="https://github.com/antfu/v-lazy-show" target="_blank" rel="noreferrer">v-lazy-show</a><blockquote><p>讓元件在第一次為 <code>v-if=&quot;true&quot;</code> 前不被實際產生，之後改由 <code>v-show</code> 切換顯示。</p></blockquote></li></ul><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><ul><li><a href="https://hasura.io/" target="_blank" rel="noreferrer">Hasura</a><blockquote><p>高性能、即時實時的 GraphQL API 引擎。<br> 可以透過實時 GraphQL API 即時訪問數據，更快地構建和發布現代應用程序和 API。<br> Hasura 會連接到數據庫、REST 服務器、GraphQL 服務器和第三方 API，以提供跨所有數據源的統一、即時實時 GraphQL API。</p></blockquote></li></ul><h2 id="_2-nd" tabindex="-1">2 nd <a class="header-anchor" href="#_2-nd" aria-label="Permalink to &quot;2 nd&quot;">​</a></h2><h3 id="打包工具-bundler" tabindex="-1">打包工具（bundler） <a class="header-anchor" href="#打包工具-bundler" aria-label="Permalink to &quot;打包工具（bundler）&quot;">​</a></h3><ul><li><a href="https://rollupjs.org/" target="_blank" rel="noreferrer">Rollup</a><blockquote><p>可以將小塊的程式碼編譯成更大、更複雜的程式碼，適合 library 的打包。<br> 主要用於生產環境（Production Environment），也需要解析編譯，但是產物是兼容性更好的原生 JS。</p></blockquote></li><li><a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a><blockquote><p>使用 Go 語言編寫的，採取併行性且有內存管理的機制，所以 esbuild 可以充分利用 CPU 來大量使用並行及內存機制，另外，esbuild 在開發時為全部自行撰寫程式，無使用第三方模組，因此速度優化上非常顯著。<br> 主要用於開發環境，解析依賴，將不同格式的文件編譯成可執行 ESM 的 JS。</p></blockquote></li><li><a href="https://webpack.js.org/" target="_blank" rel="noreferrer">webpack</a><blockquote><p>可以打包 HTML、CSS、JavaScript，對於圖片等資源（asset）也有所支援，甚至可以支援 Scss、TypeScript 等轉換。</p></blockquote></li><li><a href="https://parceljs.org/" target="_blank" rel="noreferrer">Parcel</a><blockquote><p>可指定打包目標爲 node、browser、electron（預設爲 browser）。 支援 HTML、CSS、JavaScript、Pug、Scss、Less、Stylus、Vue、TypeScript、WebAssembly 等等，且無需配置。</p></blockquote></li></ul><h2 id="_4-th" tabindex="-1">4 th <a class="header-anchor" href="#_4-th" aria-label="Permalink to &quot;4 th&quot;">​</a></h2><h3 id="套件管理工具" tabindex="-1">套件管理工具 <a class="header-anchor" href="#套件管理工具" aria-label="Permalink to &quot;套件管理工具&quot;">​</a></h3><ul><li>npx <blockquote><p>為 <code>npm v5.2.0</code> 之後內建的指令，是一種 CLI 工具，可以更方便的安裝或是管理依賴（dependencies）。<br> 使用 <code>npx</code> 命令會安裝在臨時安裝包上，等到專案初始化完成後就刪除，不用全局性的安裝，避免被汙染。</p><p><a href="https://medium.com/itsems-frontend/whats-npx-e83400efe7f8" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote></li></ul><h3 id="atomic-css-engine" tabindex="-1">Atomic CSS Engine <a class="header-anchor" href="#atomic-css-engine" aria-label="Permalink to &quot;Atomic CSS Engine&quot;">​</a></h3><ul><li><a href="https://unocss.dev/" target="_blank" rel="noreferrer">UnoCSS</a><blockquote><p>UnoCSS 為引擎，而非一款框架，因為它並未提供 core utilities，所有功能可以透過 presets 和 Inline configurations（直接在 HTML 標籤中使用 CSS 屬性的方式進行配置）提供。<br> 主要目標是直觀性和可客製化，輕鬆快速定義自己的 CSS 工具。<br></p><div class="info custom-block"><p class="custom-block-title">屬性化模式（Attributify Mode）</p><p>透過使用屬性更好地組織和分組你的 CSS 工具，由 <a href="https://github.com/unocss/unocss/tree/main/packages/preset-attributify" target="_blank" rel="noreferrer">@unocss/preset-attributify</a> 提供。</p></div><p><a href="https://antfu.me/posts/reimagine-atomic-css" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote></li></ul><h2 id="_6-th" tabindex="-1">6 th <a class="header-anchor" href="#_6-th" aria-label="Permalink to &quot;6 th&quot;">​</a></h2><h3 id="template" tabindex="-1">Template <a class="header-anchor" href="#template" aria-label="Permalink to &quot;Template&quot;">​</a></h3><ul><li><a href="https://github.com/antfu/vitesse" target="_blank" rel="noreferrer">Vitesse</a><blockquote><p>Vite + Vue Starter Template。</p></blockquote></li></ul><h3 id="工具-1" tabindex="-1">工具 <a class="header-anchor" href="#工具-1" aria-label="Permalink to &quot;工具&quot;">​</a></h3><ul><li><p><a href="https://purgecss.com/" target="_blank" rel="noreferrer">PurgeCSS</a></p><blockquote><p>用於刪除未使用的 CSS 的工具。<br> 構建網站時，可能使用像 TailwindCSS、Bootstrap、MaterializeCSS、Foundation 等 CSS 框架，但是，只需要使用框架的一小部分，並且會包含大量未使用的 CSS 樣式。<span class="span-mb"></span> PurgeCSS 將分析內容和 CSS 檔案，將檔案中使用的選擇器與內容中使用的選擇器進行匹配，並刪除未使用的選擇器，從而產生更小的 CSS 文件。</p></blockquote></li><li><p><a href="https://github.com/tw-in-js/twind" target="_blank" rel="noreferrer">Twind</a></p><blockquote><p>在運行時將 utility classes 轉換為 CSS 的小型的編譯器。<br> 這個專案的目標是將 CSS-in-JS 的靈活性與 Tailwind API 的精心考慮的限制結合起來。</p></blockquote></li></ul><h2 id="_7-th" tabindex="-1">7 th <a class="header-anchor" href="#_7-th" aria-label="Permalink to &quot;7 th&quot;">​</a></h2><h3 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><ul><li><a href="https://fela.js.org/" target="_blank" rel="noreferrer">Fela</a><blockquote><p>高效並無關於框架的工具包，用於在 JS 中處理狀態驅動的 styling。<br> 動態設計，根據應用程式狀態渲染樣式。<br> 生成 atomic CSS，並支援所有常見的 CSS 功能，例如 media queries、pseudo classes、keyframes 和 font-faces。<br> 附帶 API 以添加 vendor prefixing 或 fallback value support 等功能。</p></blockquote></li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><ul><li>REST <blockquote><p>Representational State Transfer（表現層狀態轉移）<br></p><h4 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h4><ol><li>Uniform Interface 統一介面<br> 每個資源都可以透過 URI 存取到。</li><li>Stateless 無狀態<br> 伺服器不能儲存客戶端的資訊。<br> 每一次從客戶端傳送的請求中需包含所有的必須的狀態資訊，伺服器端根據這些狀態資訊來處理請求。</li><li>快取 Cacheability<br> 管理良好的快取機制可以減少客戶端與伺服器之間的互動，進一步提了效能和可延伸性。</li><li>客戶端-伺服器 Client-Server<br> 將使用者介面所關注的邏輯和資料儲存所關注的邏輯分離開來，有助於提高使用者介面的跨平台可移植性。</li><li>分層系統 Layered System <br> 中間伺服器可以透過負載均衡和共享快取的機制提高系統的可延伸性，也便於安全策略的部署。</li><li>按需代碼 Code-On-Demand（Optional）<br> 伺服器可以透過傳送可執行程式碼給客戶端的方式臨時性的擴充功能或者客製化功能。</li></ol><div class="tip custom-block"><p class="custom-block-title">URI（Uniform Resource Identifier）</p><p>統一資源標識符，用於標識某一網際網路資源名稱的字串。</p><ul><li>URL（Uniform Resource Locator）：統一資源定位符，簡稱網址。</li></ul></div><p><a href="https://medium.com/itsems-frontend/api-%E6%98%AF%E4%BB%80%E9%BA%BC-restful-api-%E5%8F%88%E6%98%AF%E4%BB%80%E9%BA%BC-a001a85ab638" target="_blank" rel="noreferrer">⋯ Reference</a></p><p><a href="https://zh.wikipedia.org/zh-tw/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote></li></ul><h2 id="_10-th" tabindex="-1">10 th <a class="header-anchor" href="#_10-th" aria-label="Permalink to &quot;10 th&quot;">​</a></h2><h3 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h3><ul><li><code>watch</code><blockquote><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  [refA</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> refB]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;font-style:italic;">A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">B</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;font-style:italic;">prevA</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">prevB</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>callback function 的參數可以取得變化前（prev）與變化後的值。</p></blockquote></li></ul><h3 id="網頁應用程式" tabindex="-1">網頁應用程式 <a class="header-anchor" href="#網頁應用程式" aria-label="Permalink to &quot;網頁應用程式&quot;">​</a></h3><ul><li><p>PWA（Progressive Web Application）</p><blockquote><p>透過瀏覽器技術組合讓 PWA 除了網頁優勢也能夠有 native apps 的優點。</p><ul><li>Progressive 漸進式：使用者於瀏覽器中即可操作 (各瀏覽器於各平台上支援度不一)。</li><li>Responsive 響應式：可操作於 desktop、mobile 或 tablet 等裝置上。</li><li>Connectivity independent 連結獨立：可基於 service workers 架構執行，於離線或在有線網路下操作。</li><li>App-like 近似 APP：類似 APP 的操作介面。</li><li>Fresh 維持新版：因 service worker 架構，讓應用程式隨時都是在更新狀態。</li><li>Safe 安全性：必須於加密模式之下進行，因此安全較受到保障。</li><li>Discoverable 可被搜尋：透過 manifest 設定檔案及 service worker 使搜尋引擎可正常搜尋到。</li><li>Re-engageable 有互動性：透過類似推播方式與使用者更加互動。</li><li>Installable 可安裝：可以拉存到手機的桌面，感覺就像是傳統的 APP (非每種瀏覽器均支援)。</li><li>Linkable 可連結：可經由連結分享。</li></ul><p><a href="https://www.arshire.com/blog/pwa" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote></li><li><p>BEX（Browser Extension）</p><blockquote><p>在瀏覽器上下文中運行的應用程式，用於以某種方式自定義瀏覽器。<br> 基於 Web 技術（如 HTML、JavaScript 和 CSS）構建的，旨在實現單一目的。<br> 單一 BEX 可以按用戶所需的任何方式構建，但必須有助於實現該單一目的。<br> 例如：ad blocker、MetaMask 等附加於 browser 之上，可以與之互動且可能改變網頁呈現與功能的程式。<br><span class="span-mb"></span></p><p>BEX 可以執行以下幾項任務：</p><ol><li>覆蓋頁面內容</li><li>添加或修改瀏覽器的介面</li><li>攔截頁面請求</li><li>成為在瀏覽器中運行的全功能應用程式</li><li>交互並修改瀏覽器的開發工具</li></ol><p><a href="https://quasar.dev/quasar-cli-vite/developing-browser-extensions/introduction/" target="_blank" rel="noreferrer">⋯ Reference</a></p><p><a href="https://ithelp.ithome.com.tw/articles/10303345?sc=iThelpR" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote></li></ul><h2 id="_11-st" tabindex="-1">11 st <a class="header-anchor" href="#_11-st" aria-label="Permalink to &quot;11 st&quot;">​</a></h2><h3 id="框架" tabindex="-1">框架 <a class="header-anchor" href="#框架" aria-label="Permalink to &quot;框架&quot;">​</a></h3><ul><li><a href="https://cordova.apache.org/" target="_blank" rel="noreferrer">Cordova</a><blockquote><p>手機開發框架。<br> 使用 HTML5、CSS3、JS 進行跨平台開發。<br> 應用程式在針對每個平台的封裝中執行，並依賴於符合標準的 API 綁定，以訪問每個設備的功能，例如傳感器、數據、網絡狀態等。</p></blockquote></li></ul><h3 id="工具-2" tabindex="-1">工具 <a class="header-anchor" href="#工具-2" aria-label="Permalink to &quot;工具&quot;">​</a></h3><ul><li><a href="https://github.com/postcss/postcss" target="_blank" rel="noreferrer">PostCSS</a><blockquote><p>利用 JS 插件轉換樣式的工具。<br> 可以對 CSS 進行 lint，支援變數和 mixin，轉譯未來的 CSS 語法，將圖片內嵌等等。</p></blockquote></li><li><a href="https://turbo.build/repo" target="_blank" rel="noreferrer">Turborepo</a><blockquote><p>針對 JS 和 TS 程式庫進行最佳化的智能構建系統。<br> 程式庫任務（如 lint、構建和測試）執行速度可能不夠快，Turborepo 可使用快取來加速本地設置並加快 CI。</p></blockquote></li></ul><h2 id="_12-nd" tabindex="-1">12 nd <a class="header-anchor" href="#_12-nd" aria-label="Permalink to &quot;12 nd&quot;">​</a></h2><h3 id="vue-1" tabindex="-1">Vue <a class="header-anchor" href="#vue-1" aria-label="Permalink to &quot;Vue&quot;">​</a></h3><ul><li><a href="https://vuejs.org/guide/built-ins/keep-alive.html#keepalive" target="_blank" rel="noreferrer"><code>&lt;KeepAlive&gt;</code></a><blockquote><p>多個 components 之間動態切換時，可以根據條件緩存 component instance。</p></blockquote></li></ul><h3 id="資源" tabindex="-1">資源 <a class="header-anchor" href="#資源" aria-label="Permalink to &quot;資源&quot;">​</a></h3><ul><li><a href="https://www.explainthis.io/zh-hant" target="_blank" rel="noreferrer">ExplainThis</a><blockquote><p>分享免費的技術面試文章、問題與詳解等等。</p></blockquote></li></ul><h3 id="套件-1" tabindex="-1">套件 <a class="header-anchor" href="#套件-1" aria-label="Permalink to &quot;套件&quot;">​</a></h3><ul><li><a href="https://github.com/unjs/ofetch" target="_blank" rel="noreferrer">ofetch</a><blockquote><p>fetch API。<br> 透過原本的 fetch 在延伸其他功能（e.g. 建立攔截器）。</p></blockquote></li></ul><h3 id="框架-1" tabindex="-1">框架 <a class="header-anchor" href="#框架-1" aria-label="Permalink to &quot;框架&quot;">​</a></h3><ul><li><a href="https://hexo.io/" target="_blank" rel="noreferrer">Hexo</a><blockquote><p>基於 Node.js 的網誌框架，能夠快速、簡單的建置屬於自己的部落格，也可以透過 Markdown 解析文章。</p></blockquote></li></ul><h2 id="_13-th" tabindex="-1">13 th <a class="header-anchor" href="#_13-th" aria-label="Permalink to &quot;13 th&quot;">​</a></h2><h3 id="套件-2" tabindex="-1">套件 <a class="header-anchor" href="#套件-2" aria-label="Permalink to &quot;套件&quot;">​</a></h3><ul><li><a href="https://github.com/antfu/vue-reuse-template" target="_blank" rel="noreferrer">vue-reuse-template</a><blockquote><p>在 component 範圍內定義及覆用 Vue template。</p></blockquote></li><li><a href="https://github.com/unjs/magicast" target="_blank" rel="noreferrer">magicast</a><blockquote><p>使用由 recast 和 babel 驅動的簡化、優雅和熟悉的語法，以程式設計的方式修改 JS 和 TS 源程式碼。</p></blockquote></li></ul><h3 id="工具-3" tabindex="-1">工具 <a class="header-anchor" href="#工具-3" aria-label="Permalink to &quot;工具&quot;">​</a></h3><ul><li><a href="https://docs.zeabur.com/" target="_blank" rel="noreferrer">zeabur</a><blockquote><p>一鍵部署 service，不論是哪種程式語言或框架。</p></blockquote></li></ul>`,48),s=[o];function i(n,c,p,h,u,b){return a(),r("div",null,s)}const k=e(t,[["render",i]]);export{f as __pageData,k as default};
