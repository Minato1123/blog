import{_ as s,o as e,c as a,V as t}from"./chunks/framework.62adf23d.js";const u=JSON.parse('{"title":"Dec. 2022","description":"","frontmatter":{},"headers":[],"relativePath":"daily-log/dec2022.md"}'),l={name:"daily-log/dec2022.md"},n=t(`<h1 id="dec-2022" tabindex="-1">Dec. 2022 <a class="header-anchor" href="#dec-2022" aria-label="Permalink to &quot;Dec. 2022&quot;">​</a></h1><h2 id="_2-nd" tabindex="-1">2 nd <a class="header-anchor" href="#_2-nd" aria-label="Permalink to &quot;2 nd&quot;">​</a></h2><h3 id="css-flex" tabindex="-1">CSS Flex <a class="header-anchor" href="#css-flex" aria-label="Permalink to &quot;CSS Flex&quot;">​</a></h3><ul><li><code>flex-grow</code><blockquote><p>依照設定比例<span class="span-heightlight">分配剩餘空間</span>，默認為 <code>0</code>，即表示如果存在剩餘空間，也不會佔用剩餘空間。<br><code>flex-grow</code> 的值只接受一個整數。</p></blockquote></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>flex-grow</code> 會影響寬度和高度，具體取決於 <code>flex-direction</code> 屬性。<br> 在不使用 <code>flex-grow</code> 的情況下，<code>flex</code> 項目的寬度將默認為其初始寬度，但是使用 <code>flex-grow: 1;</code> 時，<code>flex</code> 項目會平均掉剩餘的可用空間。</p></div><ul><li><code>flex-shrink</code><blockquote><p>表示空間不夠時的<span class="span-heightlight">壓縮比例</span>。<br>預設值爲 1，表示大家被壓縮的比例相同。</p></blockquote></li><li><code>flex-basis</code><blockquote><p>預設值爲 <code>auto</code>，表示其預設<span class="span-heightlight">分配到的空間</span>，與 <code>width</code> 很像，但優先程度較高。</p><ul><li>當 <code>flex-direction: row;</code> 時，<code>flex-basis</code> 會決定 <code>width</code>。</li><li>當 <code>flex-direction: column;</code> 時，<code>flex-basis</code> 會決定了 <code>height</code>。</li></ul></blockquote></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>flexbox</code> 裡面的 <code>item</code> 預設會是 <code>min-width: auto;/min-height: auto;</code>，並且會是 <code>overflow: visible;</code>。</p></div><ul><li><code>align-self</code><blockquote><p>可以<span class="span-heightlight">個別調整子元素在交錯軸線的位置</span>，屬性與 <code>align-item</code> 相同。<br> 假如已經在父元素上設定 <code>align-item</code>，但要其中一個內容物的位置需要調整成其他對齊方式，這時我們就可以針對該元素設定 <code>align-self</code> 來覆寫原本 <code>align-item</code> 的屬性。</p></blockquote></li><li><code>order</code><blockquote><p>可透過 CSS 來修改 HTML 的 DOM 的順序。</p></blockquote></li></ul><div class="tip custom-block"><p class="custom-block-title">flex 簡寫</p><ul><li><code>flex: 1;</code></li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-grow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-shrink</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  flex-basic</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>flex: 1 1;</code></li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-grow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-shrink</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  flex-basic</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>flex: 100px;</code></li></ul><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-grow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">flex-shrink</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  flex-basic</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><h2 id="_3-rd" tabindex="-1">3 rd <a class="header-anchor" href="#_3-rd" aria-label="Permalink to &quot;3 rd&quot;">​</a></h2><h3 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h3><ul><li>Scope 作用域 <blockquote><p>作用域是指程式碼中<span class="span-heightlight">定義變數的區域</span>，確定當前執行程式碼對於變數的訪問權限。<br> JavaScript 採用詞法作用域（lexical scoping），也就是靜態作用域。</p><div class="info custom-block"><p class="custom-block-title">函式的作用域</p><p>詞法作用域：在函式<span class="span-heightlight">定義</span>的時候決定。<br> 動態作用域：在函式<span class="span-heightlight">調用</span>的時候決定。</p></div><ul><li>所有未定義直接賦值的變數，將自動宣告為擁有全局作用域</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">variable</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">variable2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">World</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 還是需要先執行內部以宣告變數</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(variable) </span><span style="color:#676E95;font-style:italic;">// Hello</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(variable2) </span><span style="color:#676E95;font-style:italic;">// not defined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>所有 <code>window</code> 對象的屬性擁有全局作用域<br><span class="span-mb"></span> 若變數定義沒有用函式包起來，那它們全部都將在全局作用域中，這樣容易污染全局命名空間，引起命名衝突。</li><li>函式作用域<br><span class="span-mb"></span> 指聲明在函式內部的變數。</li></ul></blockquote></li></ul><h2 id="_5-nd" tabindex="-1">5 nd <a class="header-anchor" href="#_5-nd" aria-label="Permalink to &quot;5 nd&quot;">​</a></h2><h3 id="js-1" tabindex="-1">JS <a class="header-anchor" href="#js-1" aria-label="Permalink to &quot;JS&quot;">​</a></h3><ul><li><p>垃圾回收</p><blockquote><p>程式碼運作過程中會產生很多垃圾，這些垃圾是<span class="span-heightlight">不用的記憶體空間或者是曾經用過但以後不會再用的記憶體空間</span>，而 GC (Garbage Collection) 就是負責回收垃圾的。</p></blockquote></li><li><p>垃圾如何產生？為什麼需要回收？</p><blockquote><p>創建一個基本類型、物件、函式等都是需要佔用記憶體的，因為通常引擎會幫我們分配好，所以我們不需要手動的去做分配。<br> 假設宣告一個變數 <code>test</code>，引用了物件 <code>{ name: &#39;isobj&#39; }</code>，接著我們把這個變數重新賦值了一個陣列，那之前的物件引用關係就消失了。<br> 沒有了引用關係，就是無用的物件，所以就需要被清理（回收）。</p></blockquote><blockquote><p>總而言之，程式碼的運行需要記憶體，當程式碼提出要求，操作系統或運行時就必須提供記憶體空間。<br> 為了持續運行下去，必須適時地釋放記憶體空間，否則記憶體佔用過高可能影響系統性能甚至導致崩潰。</p></blockquote></li><li><p>垃圾回收策略</p><blockquote><p>記憶體管理中有一個概念叫做「可達性」，指的是那些以某種方式可訪問或是說可用的值，它們被保證儲存在記憶體中。<br> 而<span class="span-heightlight">不可訪問的值則需要回收</span>，找出這些不可達的物件（垃圾）並清理它。<br> 原理主要就是「定期」找出那些不會再用到的變數（記憶體），然後釋放其記憶體。</p></blockquote><blockquote><p><b>標記清除（Mark-Sweep）算法</b><br><span class="span-mb"></span> 目前在 JavaScript 引擎中最常使用，不過各大瀏覽器廠商對此算法仍進行了加工，使得不同瀏覽器在運行垃圾回收的頻率上會有所差異。<br> 引擎在執行 GC 時，需要<span class="span-heightlight">從出發點去遍歷記憶體中所有的物件去做標記</span>。<br> 出發點通常我們稱為 <code>root</code> 物件，在瀏覽器環境中包括：全局 Window 物件、檔案 DOM Tree 等。</p><ul><li>優點<br><span class="span-mb"></span><ol><li>較簡單達成，標記僅為「有」與「沒有」。</li></ol></li><li>缺點<br><span class="span-mb"></span><ol><li>記憶體碎片化<br><span class="span-mb"></span> 在清除後，剩餘的物件記憶體位置不變，將導致空閒的記憶體空間是不連續的。<br> 由於剩餘空閒記憶體不是一整塊，是由不同大小的記憶體組成的記憶體列表，牽扯到了記憶體分配的問題。</li><li>分配速度慢<br><span class="span-mb"></span> 即便使用 <code>First-fit</code> 方式分配，仍是一個 <code>O(n)</code> 的操作，最壞情況是每次都要遍歷到最後，同時因為碎片化，大物件的分配效率會更慢。</li></ol></li></ul><div class="warning custom-block"><p class="custom-block-title">分配記憶體</p><p>假設新建的物件分配記憶體時需要的大小為 <code>size</code>，由於剩餘記憶體是間斷、不連續的，則需要對剩餘記憶體列表進行一次單向遍歷找出大於等於 <code>size</code> 的區塊才能進行分配。</p><ul><li><code>First-fit</code>：找到大或等於 <code>size</code> 的區塊立即回傳。</li><li><code>Best-fit</code>：遍歷整個剩餘記憶體列表，回傳大或等於 <code>size</code> 的最小區塊。</li><li><code>Worst-fit</code>：遍歷整個剩餘記憶體列表，找到最大的區塊後切成兩部分，一部分為 <code>size</code> 大小並回傳該部份。<br></li></ul><p>上述三種策略中 <code>Worst-fit</code> 的空間利用率看似合理，但實際上切分後反而會造成更多的小塊，更容易形成記憶體碎片，所以不推薦使用。 考慮到分配的速度和效率 <code>First-fit</code> 是更為明智的選擇。</p></div><div class="tip custom-block"><p class="custom-block-title">標記整理（Mark-Compact）算法</p><p>標記階段與標記清除算法大致相同，差別在於標記結束後會將活著的對象（即不需要清理的對象）向記憶體的一端移動，最後清理掉邊界的記憶體。<br> 可以有效地解決記憶體碎片化等問題。</p></div></blockquote><blockquote><p><b>引用計數（Reference Counting）算法</b><br><span class="span-mb"></span> 早期的一種垃圾回收算法，將物件是否不再需要簡化定義為物件有沒有被其他物件引用。<br> 如果<span class="span-heightlight">沒有引用指向該物件（零引用），則此物件將被垃圾回收機制回收</span>，目前很少使用這種算法了。</p><ul><li>優點<br><span class="span-mb"></span><ol><li>引用計數在引用值為 0 時（變成垃圾的那一刻）就會被回收，可以立即回收垃圾。</li></ol></li><li>缺點<span class="span-mb"></span><ol><li>需要計數器<br><span class="span-mb"></span> 計數器需要佔很大的位置，因為不知道被引用數量的上限。</li><li>無法解決循環引用（互相引用）無法回收的問題</li></ol></li></ul><div class="warning custom-block"><p class="custom-block-title">互相引用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">A</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">B</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">B</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">B</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">A</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br> 物件 A 和 B 透過各自屬性互相引用，依照引用計數策略，它們的引用數量都是 2。<br><br> 在函式 \`test\` 執行完成後，照理來說物件 A 和 B 應該是要被清理的。<br><b>但是使用引用計數則不會被清理！</b>因為它們的引用數量不會變成 0。<br><br> 假如此函式在程序中被多次調用，那麼就會造成大量的記憶體不會被釋放。 </div><p><a href="https://juejin.cn/post/6981588276356317214" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote></li></ul><h2 id="_6-nd" tabindex="-1">6 nd <a class="header-anchor" href="#_6-nd" aria-label="Permalink to &quot;6 nd&quot;">​</a></h2><h3 id="js-2" tabindex="-1">JS <a class="header-anchor" href="#js-2" aria-label="Permalink to &quot;JS&quot;">​</a></h3><ul><li><p>V8 對於 GC 的最佳化</p><blockquote><p>V8 是一個由 Google 開發的開源 JavaScript 引擎。</p></blockquote><blockquote><p><b>分代式垃圾回收</b><br><span class="span-mb"></span> V8 中將 Heap（動態記憶體配置）分為新生代和老生代兩個區域，並採用不同的垃圾回收機制。</p></blockquote><blockquote><p><b>1. 新生代垃圾回收</b><br><span class="span-mb"></span> 透過 <code>Scavenge</code> 算法進行垃圾回收，主要採用了一種複製式的方法：Cheney 算法。<br> 將 Heap 一分為二，一個是處於使用狀態的空間<span class="span-heightlight">使用區</span>，一個是處於閒置狀態的空間<span class="span-heightlight">空閒區</span>。<span class="span-mb"></span> 新加入的物件都會存放到使用區，當使用區快被寫滿時就需要執行一次垃圾清理操作。<br> 當開始進行垃圾回收時，回收器會對使用區中的活動物件做標記，標記完成之後將使用區的活動物件複製進空閒區並進行排序，隨後進入垃圾清理階段（將非活動物件所佔用的空間清理掉）。<span class="span-mb"></span> 最後將<span class="span-heightlight">原來的使用區和空閒區做角色對調</span>。<br></p><div class="tip custom-block"><p class="custom-block-title">晉升至老生代的條件</p><ol><li>當一個物件<b>經過多次的複製後依然存活</b>，它將會被認為是生命週期較長的物件，將會被移動到老生代中並採用老生代的垃圾回收機制進行管理。</li><li>如果複製一個物件到空閒區時，<b>空間佔用超過了 25%</b>，此物件會直接晉升到老生代空間中（設置為 25% 的原因是：當完成 <code>Scavenge</code> 回收後，空閒區將翻轉成使用區繼續進行物件記憶體的分配，若佔比過大將會影響後續記憶體空間的分配）。</li></ol></div></blockquote><blockquote><p><b>2. 老生代垃圾回收</b><br><span class="span-mb"></span> 物件通常比較大，採用的方式為<span class="span-heightlight">標記清除算法</span>。<span class="span-mb"></span> 首先是標記階段，從一組根元素開始遞迴遍歷這組根元素，遍歷過程中能到達的元素稱為活動物件，沒有到達的元素就可以判斷為非活動物件。<br> 清除階段會直接將非活動物件清理掉，並且 V8 中採用標記整理算法來解決記憶體碎片化的問題。</p></blockquote></li></ul><p><a href="https://juejin.cn/post/6981588276356317214" target="_blank" rel="noreferrer">⋯ Reference</a></p><h2 id="_7-th" tabindex="-1">7 th <a class="header-anchor" href="#_7-th" aria-label="Permalink to &quot;7 th&quot;">​</a></h2><h3 id="css-命名推薦" tabindex="-1">CSS 命名推薦 <a class="header-anchor" href="#css-命名推薦" aria-label="Permalink to &quot;CSS 命名推薦&quot;">​</a></h3><details class="details custom-block"><summary>Status</summary><table><thead><tr><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th></tr></thead><tbody><tr><td style="text-align:center;">前一個</td><td style="text-align:center;">prev</td><td style="text-align:center;">後一個</td><td style="text-align:center;">next</td></tr><tr><td style="text-align:center;">當前的</td><td style="text-align:center;">current</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">顯示的</td><td style="text-align:center;">show</td><td style="text-align:center;">隱藏的</td><td style="text-align:center;">hide</td></tr><tr><td style="text-align:center;">開啟的</td><td style="text-align:center;">open</td><td style="text-align:center;">關閉的</td><td style="text-align:center;">close</td></tr><tr><td style="text-align:center;">選中的</td><td style="text-align:center;">selected</td><td style="text-align:center;">有效的</td><td style="text-align:center;">active</td></tr><tr><td style="text-align:center;">預設的</td><td style="text-align:center;">default</td><td style="text-align:center;">反轉的</td><td style="text-align:center;">toggle</td></tr><tr><td style="text-align:center;">禁用的</td><td style="text-align:center;">disabled</td><td style="text-align:center;">危險的</td><td style="text-align:center;">danger</td></tr><tr><td style="text-align:center;">主要的</td><td style="text-align:center;">primary</td><td style="text-align:center;">成功的</td><td style="text-align:center;">success</td></tr><tr><td style="text-align:center;">提醒的</td><td style="text-align:center;">info</td><td style="text-align:center;">警告的</td><td style="text-align:center;">warning</td></tr><tr><td style="text-align:center;">出錯的</td><td style="text-align:center;">error</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table></details><details class="details custom-block"><summary>Layout</summary><table><thead><tr><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th></tr></thead><tbody><tr><td style="text-align:center;">文件</td><td style="text-align:center;">doc</td><td style="text-align:center;">頭部</td><td style="text-align:center;">header (hd)</td></tr><tr><td style="text-align:center;">主體</td><td style="text-align:center;">body</td><td style="text-align:center;">尾部</td><td style="text-align:center;">footer (ft)</td></tr><tr><td style="text-align:center;">主欄</td><td style="text-align:center;">main</td><td style="text-align:center;">側欄</td><td style="text-align:center;">side</td></tr><tr><td style="text-align:center;">容器</td><td style="text-align:center;">box / container</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table></details><details class="details custom-block"><summary>通用元件</summary><table><thead><tr><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th></tr></thead><tbody><tr><td style="text-align:center;">列表</td><td style="text-align:center;">list</td><td style="text-align:center;">列表項</td><td style="text-align:center;">item</td></tr><tr><td style="text-align:center;">表格</td><td style="text-align:center;">table</td><td style="text-align:center;">表單</td><td style="text-align:center;">form</td></tr><tr><td style="text-align:center;">連結</td><td style="text-align:center;">link</td><td style="text-align:center;">標題</td><td style="text-align:center;">caption / heading / title</td></tr><tr><td style="text-align:center;">選單</td><td style="text-align:center;">menu</td><td style="text-align:center;">集合</td><td style="text-align:center;">group</td></tr><tr><td style="text-align:center;">條</td><td style="text-align:center;">bar</td><td style="text-align:center;">內容</td><td style="text-align:center;">content</td></tr><tr><td style="text-align:center;">結果</td><td style="text-align:center;">result</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table></details><details class="details custom-block"><summary>一般元件</summary><table><thead><tr><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th></tr></thead><tbody><tr><td style="text-align:center;">按鈕</td><td style="text-align:center;">button (btn)</td><td style="text-align:center;">圖示</td><td style="text-align:center;">icon</td></tr><tr><td style="text-align:center;">下拉選單</td><td style="text-align:center;">dropdown</td><td style="text-align:center;">工具欄</td><td style="text-align:center;">toolbar</td></tr><tr><td style="text-align:center;">分頁</td><td style="text-align:center;">page</td><td style="text-align:center;">縮圖</td><td style="text-align:center;">thumbnail</td></tr><tr><td style="text-align:center;">警告框</td><td style="text-align:center;">alert</td><td style="text-align:center;">進度條</td><td style="text-align:center;">progress</td></tr><tr><td style="text-align:center;">導覽列</td><td style="text-align:center;">navbar</td><td style="text-align:center;">導覽</td><td style="text-align:center;">nav</td></tr><tr><td style="text-align:center;">子導覽</td><td style="text-align:center;">subnav</td><td style="text-align:center;">麵包屑</td><td style="text-align:center;">breadcrumb (crumb)</td></tr><tr><td style="text-align:center;">標籤</td><td style="text-align:center;">label</td><td style="text-align:center;">徽章</td><td style="text-align:center;">badge</td></tr><tr><td style="text-align:center;">巨幕</td><td style="text-align:center;">jumbotron</td><td style="text-align:center;">面板</td><td style="text-align:center;">panel</td></tr><tr><td style="text-align:center;">窪地</td><td style="text-align:center;">well</td><td style="text-align:center;">工具提示框</td><td style="text-align:center;">tooltip</td></tr><tr><td style="text-align:center;">彈出提示框</td><td style="text-align:center;">popover</td><td style="text-align:center;">輪播</td><td style="text-align:center;">carousel</td></tr><tr><td style="text-align:center;">折疊</td><td style="text-align:center;">collapse</td><td style="text-align:center;">手風琴</td><td style="text-align:center;">accordion</td></tr><tr><td style="text-align:center;">定位浮標</td><td style="text-align:center;">affix</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table></details><details class="details custom-block"><summary>輔助元件</summary><table><thead><tr><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th><th style="text-align:center;">意義</th><th style="text-align:center;">命名</th></tr></thead><tbody><tr><td style="text-align:center;">品牌</td><td style="text-align:center;">brand</td><td style="text-align:center;">標誌</td><td style="text-align:center;">logo</td></tr><tr><td style="text-align:center;">額外部件</td><td style="text-align:center;">addon</td><td style="text-align:center;">版權</td><td style="text-align:center;">copyright</td></tr><tr><td style="text-align:center;">註冊</td><td style="text-align:center;">regist (reg)</td><td style="text-align:center;">登入</td><td style="text-align:center;">login</td></tr><tr><td style="text-align:center;">搜尋</td><td style="text-align:center;">search</td><td style="text-align:center;">熱點</td><td style="text-align:center;">hot</td></tr><tr><td style="text-align:center;">幫助</td><td style="text-align:center;">help</td><td style="text-align:center;">資訊</td><td style="text-align:center;">info</td></tr><tr><td style="text-align:center;">提示</td><td style="text-align:center;">tips</td><td style="text-align:center;">開關</td><td style="text-align:center;">toggle</td></tr><tr><td style="text-align:center;">新聞</td><td style="text-align:center;">news</td><td style="text-align:center;">廣告</td><td style="text-align:center;">advertise (ad)</td></tr><tr><td style="text-align:center;">排行</td><td style="text-align:center;">top</td><td style="text-align:center;">下載</td><td style="text-align:center;">download</td></tr></tbody></table></details><h2 id="_8-th" tabindex="-1">8 th <a class="header-anchor" href="#_8-th" aria-label="Permalink to &quot;8 th&quot;">​</a></h2><h3 id="html-頁面生命週期" tabindex="-1">HTML 頁面生命週期 <a class="header-anchor" href="#html-頁面生命週期" aria-label="Permalink to &quot;HTML 頁面生命週期&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">重要事件</p><ul><li><code>DOMContentLoaded</code><br> 瀏覽器已完全載入 HTML，並構建了 DOM 樹，但 <code>&lt;img&gt;</code> 和樣式之類的外部資源可能尚未載入完成。<br> （DOM 已經就緒，因此處理程式可以查詢 DOM 節點，並初始化介面。）</li><li><code>load</code><br> 瀏覽器不僅載入完成了 HTML，還載入完成了所有外部資源：圖片，樣式等。<br> （外部資源已載入完成，樣式已被應用，圖片大小也已知了。）</li><li><code>beforeunload</code><br> 當使用者正在離開頁面時。<br> （使用者正在離開：我們可以檢查使用者是否儲存了更改，並詢問他是否真的要離開。）</li><li><code>unload</code><br> 當使用者正在離開頁面時。<br> （使用者幾乎已經離開了，但是我們仍然可以啟動一些操作，例如傳送統計資料。）</li></ul></div><ul><li><code>window.onload</code><blockquote><p>當<span class="span-heightlight">整個頁面，包括樣式、圖片和其他資源被載入完成時</span>，會觸發 <code>window</code> 物件上的 <code>load</code> 事件。<br> 可以透過 <code>onload</code> 屬性獲取此事件。</p></blockquote></li><li><code>window.onunload</code><blockquote><p>當訪問者離開頁面時，<code>window</code> 物件上的 <code>unload</code> 事件就會被觸發。<br> 我們可以在那裡做一些<span class="span-heightlight">不涉及延遲</span>的操作，例如關閉相關的彈出視窗。</p></blockquote></li><li><code>window.onbeforeunload</code><blockquote><p>如果訪問者觸發了離開頁面的導航（navigation）或試圖關閉視窗，<code>beforeunload</code> 處理程式將要求進行更多確認。<br> 如果我們要取消事件，瀏覽器會詢問使用者是否確定。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onbeforeunload</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Boolean</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果 <code>Boolean</code> 是 <code>true</code>，則會彈出視窗詢問是否確定離開網站，<code>false</code> 則不會。</p></blockquote></li><li><code>document.readyState</code><blockquote><ol><li><code>loading</code>：文件正在被載入。</li><li><code>interactive</code>：文件被全部讀取；與 <code>DOMContentLoaded</code> 幾乎同時發生，但是在 <code>DOMContentLoaded</code> <span class="span-heightlight">之前</span>發生。</li><li><code>complete</code>：檔案被全部讀取，並且所有資源（例如圖片等）都已載入完成；與 <code>window.onload</code> 幾乎同時發生，但是在 <code>window.onload</code> <span class="span-heightlight">之前</span>發生。</li></ol></blockquote></li><li><code>readystatechange</code> 事件 <blockquote><p>會在狀態發生改變時觸發，因此我們可以 <code>console</code> 這些狀態。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 目前狀態</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 狀態如果發生改變，則執行 callback</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">readystatechange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></blockquote></li></ul><h2 id="_10-th" tabindex="-1">10 th <a class="header-anchor" href="#_10-th" aria-label="Permalink to &quot;10 th&quot;">​</a></h2><h3 id="css-三角形" tabindex="-1">CSS 三角形 <a class="header-anchor" href="#css-三角形" aria-label="Permalink to &quot;CSS 三角形&quot;">​</a></h3><ul><li>正三角形 <blockquote><p>將長寬都設為 <code>0</code>。</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-bottom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3rem</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">de896f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3rem</span><span style="color:#A6ACCD;"> solid transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-right</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3rem</span><span style="color:#A6ACCD;"> solid transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></blockquote></li></ul><div class="outer"><div id="a"></div></div><ul><li>不透明三角形 <blockquote><p>如果將左右兩邊的邊也加上顏色。<br> （若沒有左右的邊，底邊也不會出現）</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-bottom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3rem</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">de896f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3rem</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">6ab2de</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-right</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3rem</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">82c28d</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></blockquote></li></ul><div class="outer"><div id="a2"></div></div><ul><li>如果只有設置底邊 <blockquote><p>會什麼都沒有（除非原容器長寬不是 <code>0</code>）</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1rem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1rem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-bottom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3rem</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">de896f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote></li></ul><div class="outer"><div id="a3"></div></div><h2 id="_11-th" tabindex="-1">11 th <a class="header-anchor" href="#_11-th" aria-label="Permalink to &quot;11 th&quot;">​</a></h2><h3 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><ul><li><p>Sass（Syntactically Awesome Stylesheets）</p><blockquote><p>是一種動態樣式語言，Sass 語法屬於<span class="span-heightlight">縮排語法</span>，比 CSS 比多出好些功能，如變數、巢狀、運算、混入（Mixin）、繼承、顏色處理，函式等，更容易閱讀。<br> Sass 的縮排語法，對於寫慣 css 前端的 web 開發者來說很不直觀，也不能將 CSS 程式碼加入到 Sass 裡面，因此 Sass 語法進行了改良，成為了 Scss。</p></blockquote></li><li><p>Scss（Sassy CSS）</p><blockquote><p>是 CSS 語法的擴充套件。<br> 這意味著每一個有效的 CSS 也是一個有效的 Scss 語句，與原來的語法相容，只是用 <code>{}</code> 取代了 Sass 的縮排。</p></blockquote></li><li><p>Less（Leaner Style Sheets）</p><blockquote><p>一種動態樣式語言。<br> 對 CSS 賦予了動態語言的特性，如變數、繼承、運算、函式。<br> 既可以在客戶端上執行（支援IE 6+, Webkit, Firefox），也可在伺服器端執行（Node.js）。</p></blockquote></li></ul><table><thead><tr><th>主要差異</th><th>Sass</th><th>Less</th></tr></thead><tbody><tr><td>編譯環境</td><td>伺服器端處理（Ruby、Dart-Sass 或 Node-Sass）</td><td>引入 <code>less.js</code> 來處理 Less 程式碼輸出 CSS 到瀏覽器，或在開發伺服器將 Less 語法編譯成 CSS 文件</td></tr><tr><td>變數符號</td><td><code>$</code></td><td><code>@</code></td></tr><tr><td>輸出設定</td><td>無</td><td><code>nested</code>、<code>compact</code>、<code>compressed</code>、<code>expanded</code></td></tr><tr><td>條件語句</td><td><code>if-else</code> 或 <code>for</code> 迴圈</td><td>不支援</td></tr></tbody></table><h2 id="_12-th" tabindex="-1">12 th <a class="header-anchor" href="#_12-th" aria-label="Permalink to &quot;12 th&quot;">​</a></h2><h3 id="js-3" tabindex="-1">JS <a class="header-anchor" href="#js-3" aria-label="Permalink to &quot;JS&quot;">​</a></h3><ul><li>雙問號語法 <blockquote><p>若 <code>??</code> 左方為 <code>undefined</code> 或 <code>null</code>，則回傳 <code>??</code> 右方的值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> exp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> left </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> right</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></blockquote></li></ul><h3 id="css-1" tabindex="-1">CSS <a class="header-anchor" href="#css-1" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><ul><li><code>border-image(source, slice)</code><blockquote><p>預設：<code>source: none; slice: 100%;</code></p></blockquote></li></ul><h4 id="border-原圖-width-81px" tabindex="-1">border 原圖（<code>width: 81px</code>） <a class="header-anchor" href="#border-原圖-width-81px" aria-label="Permalink to &quot;border 原圖（\`width: 81px\`）&quot;">​</a></h4><p><img src="https://developer.mozilla.org/en-US/docs/Web/CSS/border-image/border.png" alt=""></p><h4 id="原圖-81px-設定-slice-27px" tabindex="-1">原圖 81px 設定 <code>slice: 27px</code> <a class="header-anchor" href="#原圖-81px-設定-slice-27px" aria-label="Permalink to &quot;原圖 81px 設定 \`slice: 27px\`&quot;">​</a></h4><p>表示設定 1、2、3、4 為原圖的四個角落（寬度皆為 <code>27px</code>，剛好為一個紅色菱形的寬高）。<br> 剩餘的 5、6、7、8 則由原圖被切剩的部分去做填補（剩餘剛好為中間橘色菱形的寬高）。</p><p><img src="https://developer.mozilla.org/en-US/docs/Web/CSS/border-image-slice/border-image-slice.png" alt=""></p><h4 id="結果顯示" tabindex="-1">結果顯示 <a class="header-anchor" href="#結果顯示" aria-label="Permalink to &quot;結果顯示&quot;">​</a></h4><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">border-image</span><span style="color:#A6ACCD;">: url(&#39;https://developer</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">mozilla</span><span style="color:#A6ACCD;">.org/en-US/docs/Web/CSS/</span><span style="color:#FFCB6B;">border-image</span><span style="color:#A6ACCD;">/border.png&#39;) 27;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div id="border-image"> This is a box with a border around it. </div><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-image" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote><h2 id="_14-th" tabindex="-1">14 th <a class="header-anchor" href="#_14-th" aria-label="Permalink to &quot;14 th&quot;">​</a></h2><h3 id="css-2" tabindex="-1">CSS <a class="header-anchor" href="#css-2" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><ul><li><code>scroll-snap-type</code></li></ul><div class="holster"><p>- mandatory</p><div class="the-container x mandatory-scroll-snapping" dir="ltr"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></div><p>- proximity</p><div class="the-container x proximity-scroll-snapping" dir="ltr"><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></div></div><h2 id="_15-th" tabindex="-1">15 th <a class="header-anchor" href="#_15-th" aria-label="Permalink to &quot;15 th&quot;">​</a></h2><h3 id="資源" tabindex="-1">資源 <a class="header-anchor" href="#資源" aria-label="Permalink to &quot;資源&quot;">​</a></h3><ul><li><a href="https://roadmap.sh/frontend" target="_blank" rel="noreferrer">前端工程師技能樹</a></li><li><a href="https://roadmap.sh/vue" target="_blank" rel="noreferrer">Vue 工程師技能樹</a></li></ul><h3 id="技術" tabindex="-1">技術 <a class="header-anchor" href="#技術" aria-label="Permalink to &quot;技術&quot;">​</a></h3><ul><li>SSG（Static Side Generation） <blockquote><p>所有的內容都在 <code>bulid</code> 的時候都打包進入檔案中，所以使用者在瀏覽網站時，就可以拿到完整的 <code>HTML</code> 檔案。<br> 優點除了可以<span class="span-heightlight">有利於 SEO </span>之外，還有因為每次使用者拿到的 <code>HTML</code> 內容都不會變，所以還可以讓 <code>HTML</code> 被 <code>cache</code> 在 <code>CDN</code> 上，很適合用在資料變動較小的網站中，像是部落格、產品介紹頁這種應用中。<br> 但使用 SSG 這項技術時，除了必須考量到頁面資料更新頻率的問題，再者要衡量隨著應用越來越大時，打包的時間也會隨之增長。<br><span class="span-mb"></span><a href="https://ithelp.ithome.com.tw/m/articles/10266781" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote></li></ul><h2 id="_17-th" tabindex="-1">17 th <a class="header-anchor" href="#_17-th" aria-label="Permalink to &quot;17 th&quot;">​</a></h2><h3 id="css-3" tabindex="-1">CSS <a class="header-anchor" href="#css-3" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><ul><li>梯形 <blockquote><p>跟三角形的方式很相似，但這次增加了矩形主體的面積。</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> transparent transparent </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">de896f transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> solid solid solid solid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2rem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6rem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6rem</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">margin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> auto</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></blockquote><div class="outer"><div class="trapezoid"></div></div></li></ul><h2 id="_19-th" tabindex="-1">19 th <a class="header-anchor" href="#_19-th" aria-label="Permalink to &quot;19 th&quot;">​</a></h2><h3 id="js-4" tabindex="-1">JS <a class="header-anchor" href="#js-4" aria-label="Permalink to &quot;JS&quot;">​</a></h3><ul><li>Fetch <blockquote><p><code>fetch</code> 回傳的 <code>response</code> 可以透過 <code>blob()</code>, <code>json()</code>, <code>text()</code> 轉成可用的資訊。<br> 記得 <code>fetch</code> 是異步的動作，會需要配合 <code>.then()</code> 或是 <code>async / await</code>。</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// fetch 會使用 ES6 的 Promise 作回應</span></span>
<span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 定義 method: GET | POST | PATCH | PUT | DELETE</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// headers 加入 json 格式</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">application/json</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// body 將 json 轉字串送出</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><a href="https://www.casper.tw/javascript/2017/12/28/javascript-fetch/" target="_blank" rel="noreferrer">⋯ Reference</a></li></ul><h2 id="_22-nd" tabindex="-1">22 nd <a class="header-anchor" href="#_22-nd" aria-label="Permalink to &quot;22 nd&quot;">​</a></h2><ul><li><p>Timestamp 時間戳</p><blockquote><p>從 UTC+0 時區的 1970 年 1 月 1 號 0 時 0 分 0 秒開始，總共過了多少<span class="span-heightlight">毫秒</span>。<br> Type：<code>number</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1673598541032</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>缺點：無法直接看出時間，一定要經過轉換。</p></blockquote><blockquote><p><b>ISO 8601</b><br> 用字符串表現一個<span class="span-heightlight">帶有時區</span>的時間。<br> Type：<code>string</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toISOString</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2020-12-26T12:38:00Z</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>最後面如果是 <code>Z</code> 就代表 <code>UTC +0</code> 時區。<br> 如果要其他時區可以這樣寫：<code>2020-12-26T12:38:00+08:00</code>。<br> 代表 +8 時區的 12 月 26 號 12 點 38 分 0 秒。<br></p></blockquote></li><li><p>JavaScript 中的時間處理</p><blockquote><table><thead><tr><th>函式</th><th>結果</th></tr></thead><tbody><tr><td><code>getYear</code></td><td>當前年份 - 1900</td></tr><tr><td><code>getFullYear</code></td><td>當前年份</td></tr><tr><td><code>getMonth</code></td><td>月份數字會從 0 開始</td></tr><tr><td><code>getHours</code></td><td>會先把時間轉成 Local Time</td></tr></tbody></table></blockquote></li></ul><p><a href="https://blog.csdn.net/weixin_46803507/article/details/120093242" target="_blank" rel="noreferrer">⋯ Reference</a></p><h2 id="_23-rd" tabindex="-1">23 rd <a class="header-anchor" href="#_23-rd" aria-label="Permalink to &quot;23 rd&quot;">​</a></h2><h3 id="套件" tabindex="-1">套件 <a class="header-anchor" href="#套件" aria-label="Permalink to &quot;套件&quot;">​</a></h3><ul><li><a href="https://github.com/euvl/vue-js-modal" target="_blank" rel="noreferrer">vue-js-modal</a><blockquote><p>使用方便、高度可自訂的 Vue.js modal 庫，支援靜態和動態兩種類型的 modal。</p></blockquote></li><li><a href="https://github.com/euvl/vue-notification" target="_blank" rel="noreferrer">vue-notification</a><blockquote><p>主要幫助建構漂亮的通知（向使用者顯示訊息）。<br> 提供了許多功能，如動畫、自訂位置、樣式等等。</p></blockquote></li><li><a href="https://github.com/f/vue-wait" target="_blank" rel="noreferrer">vue-wait</a><blockquote><p>在沒有任何衝突的情況下<span class="span-heightlight">控制頁面上的各種載入狀態</span>。<br> 核心原理是管理一個具有多個載入狀態的陣列，整合載入器元件開始監聽其註冊的載入器並立即進入載入狀態。</p></blockquote></li><li><a href="https://github.com/xaksis/vue-good-table" target="_blank" rel="noreferrer">vue-good-table</a><blockquote><p>易於使用的強大的 Vue.js 數據表，具有進階客製化功能，包括：排序、列過濾、分頁、分組等。</p></blockquote></li></ul><p><a href="https://juejin.cn/post/7175905647018377277?share_token=000da226-ff8c-45e7-a3d4-587603dd5c8d" target="_blank" rel="noreferrer">⋯ Reference</a></p><h2 id="_25-nd" tabindex="-1">25 nd <a class="header-anchor" href="#_25-nd" aria-label="Permalink to &quot;25 nd&quot;">​</a></h2><h3 id="css-postprocessor-後處理器" tabindex="-1">CSS Postprocessor 後處理器 <a class="header-anchor" href="#css-postprocessor-後處理器" aria-label="Permalink to &quot;CSS Postprocessor 後處理器&quot;">​</a></h3><ul><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noreferrer">Autoprefixer</a><blockquote><p>透過 Can I Use 解析 CSS 並<span class="span-heightlight">將供應商前綴添加到規則中</span>。<br> 對於一些過時的 CSS 供應商前綴，Autoprefixer 也會自動清除。<br> 尚未被廣泛使用的 CSS 屬性會需要加上前綴，才能被瀏覽器所解析，此工具可以幫忙添加前綴，不需要自己花費時間查詢。</p></blockquote></li></ul><h2 id="_28-nd" tabindex="-1">28 nd <a class="header-anchor" href="#_28-nd" aria-label="Permalink to &quot;28 nd&quot;">​</a></h2><h3 id="前端框架" tabindex="-1">前端框架 <a class="header-anchor" href="#前端框架" aria-label="Permalink to &quot;前端框架&quot;">​</a></h3><ul><li><p><a href="https://qwik.builder.io/" target="_blank" rel="noreferrer">Qwik</a></p><blockquote><p>語法接近 React 的前端 SSR 框架。</p><ol><li>大幅優化甚至取消了 hydration 的過程</li><li>不只是延遲載入元件, 還可以延遲載入點擊事件等程式碼</li><li>幾乎可以做到僅載入當前用到的 JS 程式碼與 CSS 程式碼</li><li>DOM 元素沒有出現在螢幕的可視範圍, 則不執行元件內部函式</li></ol><p>目標是延遲載入所有的程式碼, 比如一個按鈕你沒有點選它之前, 那麼 Qwik 就不會去載入點選相關邏輯, 甚至他都不會去載入 React 相關的程式碼, 畢竟有的時候使用者進入頁面後也確實沒有進行任何操作, 那麼沒必要去載入所有資源。<br><a href="https://segmentfault.com/a/1190000042250628" target="_blank" rel="noreferrer">⋯ Reference</a></p></blockquote><div class="tip custom-block"><p class="custom-block-title">Hydration</p><p>是一種向伺服器呈現的 HTML 新增互動性的技術。<br> 客戶端 JavaScript 透過將事件處理程式附加到 HTML 元素，將靜態 HTML 網頁轉換為動態網頁。<br></p></div><p><a href="https://juejin.cn/post/7108884580631281678" target="_blank" rel="noreferrer">⋯ Reference</a></p></li><li><p><a href="https://www.sveltejs.cn/" target="_blank" rel="noreferrer">Svelte</a></p><blockquote><p>傳統框架如 React 和 Vue 在瀏覽器中需要做大量的工作，而 Svelte 將這些工作放到構建應用程式的編譯階段來處理，與使用虛擬（virtual）DOM 差異對比不同。</p><ol><li>沒有 Virtual DOM 機制（runtime 和 bundle size 較小）</li><li>將程式碼先做編譯後再執行</li></ol></blockquote><p><a href="https://ithelp.ithome.com.tw/articles/10235364" target="_blank" rel="noreferrer">⋯ Reference</a></p></li></ul>`,84),o=[n];function p(r,c,i,d,y,b){return e(),a("div",null,o)}const D=s(l,[["render",p]]);export{u as __pageData,D as default};
